"""Add accounts, account_types tables

Revision ID: f7d2ed2fba47
Revises: 6f7b01aa1459
Create Date: 2019-01-26 07:07:41.562581

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm.session import Session
from qif_transaction_generator.models import AccountType, AccountTypeEnum

# revision identifiers, used by Alembic.
revision = 'f7d2ed2fba47'
down_revision = '6f7b01aa1459'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account_types',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('code', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('id'))

    op.create_table('accounts',
                    sa.Column('guid', sa.String(length=32), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column(
                        'parent_guid', sa.String(length=32), nullable=True),
                    sa.Column('account_type_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['account_type_id'],
                        ['account_types.id'],
                    ),
                    sa.ForeignKeyConstraint(
                        ['parent_guid'],
                        ['accounts.guid'],
                    ), sa.PrimaryKeyConstraint('guid'))
    # ### end Alembic commands ###

    acount_types = AccountType.__table__
    op.bulk_insert(acount_types, [
        {
            'id': AccountTypeEnum.ASSET.value,
            'code': AccountTypeEnum.ASSET.name
        },
        {
            'id': AccountTypeEnum.BANK.value,
            'code': AccountTypeEnum.BANK.name
        },
        {
            'id': AccountTypeEnum.CASH.value,
            'code': AccountTypeEnum.CASH.name
        },
        {
            'id': AccountTypeEnum.CREDIT.value,
            'code': AccountTypeEnum.CREDIT.name
        },
        {
            'id': AccountTypeEnum.EQUITY.value,
            'code': AccountTypeEnum.EQUITY.name
        },
        {
            'id': AccountTypeEnum.EXPENSE.value,
            'code': AccountTypeEnum.EXPENSE.name
        },
        {
            'id': AccountTypeEnum.INCOME.value,
            'code': AccountTypeEnum.INCOME.name
        },
        {
            'id': AccountTypeEnum.LIABILITY.value,
            'code': AccountTypeEnum.LIABILITY.name
        },
        {
            'id': AccountTypeEnum.MUTUAL.value,
            'code': AccountTypeEnum.MUTUAL.name
        },
        {
            'id': AccountTypeEnum.ROOT.value,
            'code': AccountTypeEnum.ROOT.name
        },
        {
            'id': AccountTypeEnum.STOCK.value,
            'code': AccountTypeEnum.STOCK.name
        },
        {
            'id': AccountTypeEnum.TRADING.value,
            'code': AccountTypeEnum.TRADING.name
        },
    ])


def downgrade():
    session = Session(bind=op.get_bind())
    q = AccountType.__table__.delete().where(
        AccountType.code.in_([
            AccountTypeEnum.ASSET.name, AccountTypeEnum.BANK.name,
            AccountTypeEnum.CASH.name, AccountTypeEnum.CREDIT.name,
            AccountTypeEnum.EQUITY.name, AccountTypeEnum.EXPENSE.name,
            AccountTypeEnum.INCOME.name, AccountTypeEnum.LIABILITY.name,
            AccountTypeEnum.MUTUAL.name, AccountTypeEnum.ROOT.name,
            AccountTypeEnum.STOCK.name, AccountTypeEnum.TRADING.name
        ]))
    session.execute(q)
    session.commit()

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('accounts')
    op.drop_table('account_types')
    # ### end Alembic commands ###
